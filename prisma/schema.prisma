generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  avatar        String?
  bio           String?
  role          Role      @default(USER)
  isVerified    Boolean   @default(false)
  followers     Int       @default(0)
  following     Int       @default(0)
  totalViews    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  streams       Stream[]
  follows       Follow[]  @relation("UserFollows")
  followedBy    Follow[]  @relation("UserFollowedBy")
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  donations     Donation[]
  chatMessages  ChatMessage[]
  moderatedChannels ModeratorRole[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stream {
  id           String      @id @default(cuid())
  title        String
  description  String?
  thumbnailUrl String?
  streamKey    String      @unique
  rtmpUrl      String?
  hlsUrl       String?
  isLive       Boolean     @default(false)
  viewers      Int         @default(0)
  maxViewers   Int         @default(0)
  totalViews   Int         @default(0)
  duration     Int         @default(0)
  category     String
  tags         String[]
  startedAt    DateTime?
  endedAt      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  streamerId   String
  streamer     User        @relation(fields: [streamerId], references: [id], onDelete: Cascade)
  
  chatMessages ChatMessage[]
  donations    Donation[]

  @@map("streams")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Subscription {
  id           String           @id @default(cuid())
  subscriberId String
  streamerId   String
  tier         SubscriptionTier @default(TIER_1)
  isActive     Boolean          @default(true)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  createdAt    DateTime         @default(now())

  subscriber   User @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  streamer     User @relation("UserSubscribers", fields: [streamerId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, streamerId])
  @@map("subscriptions")
}

model Donation {
  id        String   @id @default(cuid())
  amount    Float
  message   String?
  currency  String   @default("USD")
  createdAt DateTime @default(now())

  donorId   String
  streamId  String
  donor     User   @relation(fields: [donorId], references: [id], onDelete: Cascade)
  stream    Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@map("donations")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(REGULAR)
  createdAt DateTime    @default(now())

  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model ModeratorRole {
  id        String   @id @default(cuid())
  userId    String
  streamerId String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, streamerId])
  @@map("moderator_roles")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  viewers     Int      @default(0)
  createdAt   DateTime @default(now())

  @@map("categories")
}

enum Role {
  USER
  STREAMER
  MODERATOR
  ADMIN
}

enum SubscriptionTier {
  TIER_1
  TIER_2
  TIER_3
}

enum MessageType {
  REGULAR
  SUBSCRIPTION
  DONATION
  FOLLOW
  RAID
  HOST
}